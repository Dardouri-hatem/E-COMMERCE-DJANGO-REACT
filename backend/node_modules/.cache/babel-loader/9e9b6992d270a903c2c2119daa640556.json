{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dardo\\\\Desktop\\\\e-commerce\\\\frontend\\\\src\\\\components\\\\Products\\\\checkout.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, useStripe, useElements, injectStripe, StripeProvider } from \"@stripe/react-stripe-js\";\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Order from \"./order\";\nimport { connect } from \"react-redux\";\n\nconst CheckoutForm = ({\n  success\n}, {\n  user,\n  cart\n}) => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      token\n    } = await stripe.createToken();\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement)\n    });\n\n    if (!error) {\n      console.log(stripe);\n      const {\n        id\n      } = paymentMethod;\n      const user_id = 1;\n\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `JWT ${localStorage.getItem(\"access\")}`,\n            Accept: \"application/json\"\n          }\n        };\n        const {\n          data\n        } = await axios.post(`http://127.0.0.1:8000/products/checkout/`, {\n          id,\n          user_id\n        }, config);\n        console.log(data);\n        success();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mt-3 mr-5\",\n    onSubmit: handleSubmit,\n    style: {\n      width: \"50%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Would you complete your purchase ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: !stripe,\n      style: {\n        width: \"100%\"\n      },\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nconst mapSTP = state => ({\n  user: state.account.user,\n  cart: state.product.cart\n});\n\nconnect(mapSTP)(CheckoutForm); // you should use env variables here to not commit this\n// but it is a public key anyway, so not as sensitive\n\nconst InjectedForm = withRouter(_c2 = injectStripe(CheckoutForm));\n_c3 = InjectedForm;\n\nconst Index = () => {\n  _s2();\n\n  const [status, setStatus] = React.useState(\"ready\");\n\n  if (status === \"success\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Congrats on your payment!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StripeProvider, {\n    apiKey: \"pk_test_51HpWUdAHdk3LQCR4NdO1v4XGdIci4KVffOBjlY3p84Y65CDxa2wz3NgaGAxoLDAFDbh8UoAy85cqHWNd5I5MyypH00fcFtkQqs\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Complete your order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Elements, {\n        children: /*#__PURE__*/_jsxDEV(InjectedForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Index, \"rZIcqvLNkUw+2PDMTi/XaO7+k8c=\");\n\n_c4 = Index;\nexport default Index;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"InjectedForm$withRouter\");\n$RefreshReg$(_c3, \"InjectedForm\");\n$RefreshReg$(_c4, \"Index\");","map":{"version":3,"sources":["C:/Users/dardo/Desktop/e-commerce/frontend/src/components/Products/checkout.js"],"names":["React","loadStripe","Elements","CardElement","useStripe","useElements","injectStripe","StripeProvider","Button","axios","Order","connect","CheckoutForm","success","user","cart","stripe","elements","handleSubmit","event","preventDefault","token","createToken","error","paymentMethod","createPaymentMethod","type","card","getElement","console","log","id","user_id","config","headers","Authorization","localStorage","getItem","Accept","data","post","width","mapSTP","state","account","product","InjectedForm","withRouter","Index","status","setStatus","useState"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport {\r\n  Elements,\r\n  CardElement,\r\n  useStripe,\r\n  useElements,injectStripe,StripeProvider\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Order from \"./order\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst CheckoutForm = ({ success }, { user, cart }) => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const { token } = await stripe.createToken ()\r\n\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: elements.getElement(CardElement),\r\n    });\r\n\r\n    if (!error) {\r\n      console.log(stripe);\r\n      const { id } = paymentMethod;\r\n      const user_id = 1;\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `JWT ${localStorage.getItem(\"access\")}`,\r\n            Accept: \"application/json\",\r\n          },\r\n        };\r\n        const { data } = await axios.post(\r\n          `http://127.0.0.1:8000/products/checkout/`,\r\n          { id, user_id },\r\n          config\r\n        );\r\n        console.log(data);\r\n        success();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"mt-3 mr-5\"\r\n      onSubmit={handleSubmit}\r\n      style={{ width: \"50%\" }}\r\n    >\r\n      <h3>Would you complete your purchase ?</h3>\r\n      <CardElement />\r\n      <Button type=\"submit\" disabled={!stripe} style={{ width: \"100%\" }}>\r\n        Pay\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\nconst mapSTP = (state) => ({\r\n  user: state.account.user,\r\n  cart: state.product.cart,\r\n});\r\nconnect(mapSTP)(CheckoutForm);\r\n\r\n// you should use env variables here to not commit this\r\n// but it is a public key anyway, so not as sensitive\r\n\r\nconst InjectedForm = withRouter(injectStripe(CheckoutForm));\r\n\r\nconst Index = () => {\r\n  const [status, setStatus] = React.useState(\"ready\");\r\n\r\n  if (status === \"success\") {\r\n    return <div>Congrats on your payment!</div>;\r\n  }\r\n\r\n  return (\r\n    <StripeProvider apiKey=\"pk_test_51HpWUdAHdk3LQCR4NdO1v4XGdIci4KVffOBjlY3p84Y65CDxa2wz3NgaGAxoLDAFDbh8UoAy85cqHWNd5I5MyypH00fcFtkQqs\">\r\n      <div>\r\n        <h1>Complete your order</h1>\r\n        <Elements>\r\n          <InjectedForm />\r\n        </Elements>\r\n      </div>\r\n    </StripeProvider>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}