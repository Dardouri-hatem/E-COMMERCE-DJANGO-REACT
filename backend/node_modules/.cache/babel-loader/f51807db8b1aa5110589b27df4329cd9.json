{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dardo\\\\Desktop\\\\e-commerce\\\\frontend\\\\src\\\\components\\\\Products\\\\checkout.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Order from \"./order\";\nimport { connect } from 'react-redux';\n\nconst CheckoutForm = ({\n  success\n}) => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement)\n    });\n\n    if (!error) {\n      console.log(stripe);\n      const {\n        id\n      } = paymentMethod;\n\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `JWT ${localStorage.getItem(\"access\")}`,\n            Accept: \"application/json\"\n          }\n        };\n        const {\n          data\n        } = await axios.post(`http://127.0.0.1:8000/products/checkout/`, {\n          id,\n          user_id\n        }, config);\n        console.log(data);\n        success();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  connect(mapS)(CheckoutForm);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mt-3 mr-5\",\n    onSubmit: handleSubmit,\n    style: {\n      width: \"50%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Would you complete your purchase ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: !stripe,\n      style: {\n        width: \"100%\"\n      },\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}; // you should use env variables here to not commit this\n// but it is a public key anyway, so not as sensitive\n\n\n_s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nconst stripePromise = loadStripe(\"pk_test_51HpWUdAHdk3LQCR4NdO1v4XGdIci4KVffOBjlY3p84Y65CDxa2wz3NgaGAxoLDAFDbh8UoAy85cqHWNd5I5MyypH00fcFtkQqs\");\n\nconst Index = () => {\n  _s2();\n\n  const [status, setStatus] = React.useState(\"ready\");\n\n  if (status === \"success\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Congrats on your payment!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripePromise,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(CheckoutForm, {\n        success: () => {\n          setStatus(\"success\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Order, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Index, \"rZIcqvLNkUw+2PDMTi/XaO7+k8c=\");\n\n_c2 = Index;\nexport default Index;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"Index\");","map":{"version":3,"sources":["C:/Users/dardo/Desktop/e-commerce/frontend/src/components/Products/checkout.js"],"names":["React","useEffect","loadStripe","Elements","CardElement","useStripe","useElements","Button","axios","Order","connect","CheckoutForm","success","stripe","elements","handleSubmit","event","preventDefault","error","paymentMethod","createPaymentMethod","type","card","getElement","console","log","id","config","headers","Authorization","localStorage","getItem","Accept","data","post","user_id","mapS","width","stripePromise","Index","status","setStatus","useState","display"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport {\r\n  Elements,\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Order from \"./order\";\r\nimport {connect} from 'react-redux'\r\n\r\nconst CheckoutForm = ({ success }) => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: elements.getElement(CardElement),\r\n    });\r\n\r\n    if (!error) {\r\n      console.log(stripe);\r\n      const { id } = paymentMethod;\r\n\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `JWT ${localStorage.getItem(\"access\")}`,\r\n            Accept: \"application/json\",\r\n          },\r\n        };\r\n        const { data } = await axios\r\n        .post(\r\n          `http://127.0.0.1:8000/products/checkout/`,\r\n          { id,user_id},config);\r\n        console.log(data);\r\n        success();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n  connect (mapS)(CheckoutForm)\r\n  return (\r\n    <form className=\"mt-3 mr-5\" onSubmit={handleSubmit} style={{ width: \"50%\" }}>\r\n      <h3>Would you complete your purchase ?</h3>\r\n      <CardElement />\r\n      <Button type=\"submit\" disabled={!stripe} style={{ width: \"100%\" }}>\r\n        Pay\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\n// you should use env variables here to not commit this\r\n// but it is a public key anyway, so not as sensitive\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51HpWUdAHdk3LQCR4NdO1v4XGdIci4KVffOBjlY3p84Y65CDxa2wz3NgaGAxoLDAFDbh8UoAy85cqHWNd5I5MyypH00fcFtkQqs\"\r\n);\r\n\r\nconst Index = () => {\r\n  const [status, setStatus] = React.useState(\"ready\");\r\n\r\n  if (status === \"success\") {\r\n    return <div>Congrats on your payment!</div>;\r\n  }\r\n\r\n  return (\r\n    <Elements stripe={stripePromise}>\r\n      <div style={{ display: \"flex\" }}>\r\n        <CheckoutForm\r\n          success={() => {\r\n            setStatus(\"success\");\r\n          }}\r\n        />\r\n        <Order />\r\n      </div>\r\n    </Elements>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}