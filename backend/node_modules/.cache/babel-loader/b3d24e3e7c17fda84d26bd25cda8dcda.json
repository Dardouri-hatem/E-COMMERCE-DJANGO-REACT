{"ast":null,"code":"import axios from 'axios';\nimport { SIGNUP_SUCCESS, ACTIVATION_SUCCESS, ACTIVATION_FAIL, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, RESET_PASSWORD_CONFIRM_SUCCESS, RESET_PASSWORD_CONFIRM_FAIL, LOGOUT, LOGIN_SUCCESS, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL } from '../constants';\nimport { returnErrors, clearErrors } from \"./errors\"; // CHECK AUTHENTICATION\n\nexport const checkAuthenticated = () => async dispatch => {\n  if (typeof window == 'undefined') {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n}; // REGISTER A NEW USER \n\nexport const sign_up = ({\n  name,\n  email,\n  password,\n  re_password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch(returnErrors({\n      msg: error.response.data,\n      status: error.response.status,\n      id: \"SIGNUP_FAIL\"\n    }));\n  }\n}; // VERIFY WITH AN EMAIL SENT TO USER'S EMAIL \n\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n}; // LOGIN A USER \n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (error) {\n    dispatch(returnErrors({\n      msg: error.response.data,\n      status: error.response.status,\n      id: \"LOGIN_FAIL\"\n    }));\n  }\n}; // LOAD A USER \n\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`http://127.0.0.1:8000/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n}; // FORGET PASSWORD ----> SENT AN EMAIL TO CONFIRM\n\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: RESET_PASSWORD_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL\n    });\n  }\n}; // RESET A NEW PASSWORD WITH LIEN SENT IN EMAIL\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_FAIL\n    });\n  }\n}; // LOGOUT\n\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/dardo/Desktop/e-commerce/frontend/src/JS/actions/account.js"],"names":["axios","SIGNUP_SUCCESS","ACTIVATION_SUCCESS","ACTIVATION_FAIL","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","RESET_PASSWORD_CONFIRM_SUCCESS","RESET_PASSWORD_CONFIRM_FAIL","LOGOUT","LOGIN_SUCCESS","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","returnErrors","clearErrors","checkAuthenticated","dispatch","window","type","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","data","code","err","sign_up","name","email","password","re_password","payload","error","msg","response","status","id","verify","uid","login","load_user","get","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nimport {SIGNUP_SUCCESS,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_FAIL,\r\n    RESET_PASSWORD_CONFIRM_SUCCESS,\r\n    RESET_PASSWORD_CONFIRM_FAIL,\r\n    LOGOUT,\r\n    LOGIN_SUCCESS,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL\r\n} from '../constants'\r\n\r\nimport { returnErrors, clearErrors } from \"./errors\";\r\n\r\n\r\n// CHECK AUTHENTICATION\r\nexport const checkAuthenticated = () => async dispatch => {\r\n    if (typeof window == 'undefined') {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n    \r\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\r\n    \r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\r\n    \r\n            if (res.data.code !== 'token_not_valid') {\r\n                dispatch({\r\n                    type: AUTHENTICATED_SUCCESS\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: AUTHENTICATED_FAIL\r\n                });\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\n// REGISTER A NEW USER \r\nexport const sign_up = ({name,email,password,re_password})=>async (dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ name, email, password, re_password }); \r\n    try {\r\n        const res = await axios.post(`http://127.0.0.1:8000/auth/users/`, body, config);\r\n\r\n        dispatch({\r\n            type: SIGNUP_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (error) {\r\n        dispatch(\r\n            returnErrors({\r\n              msg: error.response.data,\r\n              status: error.response.status,\r\n              id: \"SIGNUP_FAIL\",\r\n            })\r\n          );\r\n    }\r\n}\r\n\r\n// VERIFY WITH AN EMAIL SENT TO USER'S EMAIL \r\nexport const verify = (uid, token) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ uid, token }); \r\n\r\n    try {\r\n        const res = await axios.post(`http://127.0.0.1:8000/auth/users/activation/`, body, config);\r\n\r\n        dispatch({\r\n            type: ACTIVATION_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTIVATION_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\n// LOGIN A USER \r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n        const res = await axios.post(`http://127.0.0.1:8000/auth/jwt/create/`, body, config);\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(load_user());\r\n    } catch (error) {\r\n        dispatch(\r\n            returnErrors({\r\n              msg: error.response.data,\r\n              status: error.response.status,\r\n              id: \"LOGIN_FAIL\",\r\n            })\r\n          );\r\n    }\r\n};\r\n\r\n\r\n// LOAD A USER \r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.get(`http://127.0.0.1:8000/auth/users/me/`, config);\r\n\r\n            dispatch({\r\n                type: USER_LOADED_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: USER_LOADED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n// FORGET PASSWORD ----> SENT AN EMAIL TO CONFIRM\r\nexport const reset_password = (email) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ email }); \r\n\r\n    try {\r\n        const res = await axios.post(`http://127.0.0.1:8000/auth/users/reset_password/`, body, config);\r\n\r\n        dispatch({\r\n            type: RESET_PASSWORD_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: RESET_PASSWORD_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\n// RESET A NEW PASSWORD WITH LIEN SENT IN EMAIL\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password }); \r\n\r\n    try {\r\n        const res = await axios.post(`http://127.0.0.1:8000/auth/users/reset_password_confirm/`, body, config);\r\n\r\n        dispatch({\r\n            type: RESET_PASSWORD_CONFIRM_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: RESET_PASSWORD_CONFIRM_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n// LOGOUT\r\nexport const logout = () => async (dispatch) => {\r\n    dispatch({ type: LOGOUT });\r\n}"]},"metadata":{},"sourceType":"module"}