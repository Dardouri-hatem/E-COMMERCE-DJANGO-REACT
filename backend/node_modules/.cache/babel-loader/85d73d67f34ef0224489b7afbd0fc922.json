{"ast":null,"code":"import axios from \"axios\";\nimport { SIGNUP_SUCCESS, ACTIVATION_SUCCESS, ACTIVATION_FAIL, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, RESET_PASSWORD_CONFIRM_SUCCESS, RESET_PASSWORD_CONFIRM_FAIL, LOGOUT, LOGIN_SUCCESS, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL } from \"../constants\";\nimport { returnErrors, clearErrors } from \"./errors\"; // CHECK AUTHENTICATION\n\nexport const checkAuthenticated = () => async dispatch => {\n  if (typeof window == \"undefined\") {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem(\"access\")\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== \"token_not_valid\") {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n}; // REGISTER A NEW USER\n\nexport const sign_up = ({\n  name,\n  email,\n  password,\n  re_password\n}) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch(returnErrors({\n      msg: error.response.data,\n      status: error.response.status,\n      id: \"SIGNUP_FAIL\"\n    }));\n  }\n}; // VERIFY WITH AN EMAIL SENT TO USER'S EMAIL\n\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n}; // LOGIN A USER\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (error) {\n    dispatch(returnErrors({\n      msg: error.response.data,\n      status: error.response.status,\n      id: \"LOGIN_FAIL\"\n    }));\n  }\n}; // LOAD A USER\n\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.getItem(\"access\")}`,\n        Accept: \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(`http://127.0.0.1:8000/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n}; // FORGET PASSWORD ----> SENT AN EMAIL TO CONFIRM\n\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: RESET_PASSWORD_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch(returnErrors({\n      msg: error.response.data,\n      status: error.response.status,\n      id: \"RESET_PASSWORD_FAIL\"\n    }));\n  }\n}; // RESET A NEW PASSWORD WITH LIEN SENT IN EMAIL\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_FAIL\n    });\n  }\n}; // LOGOUT\n\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/dardo/Desktop/e-commerce/frontend/src/JS/actions/account.js"],"names":["axios","SIGNUP_SUCCESS","ACTIVATION_SUCCESS","ACTIVATION_FAIL","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","RESET_PASSWORD_CONFIRM_SUCCESS","RESET_PASSWORD_CONFIRM_FAIL","LOGOUT","LOGIN_SUCCESS","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","returnErrors","clearErrors","checkAuthenticated","dispatch","window","type","localStorage","getItem","config","headers","Accept","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","data","code","err","sign_up","name","email","password","re_password","payload","error","msg","response","status","id","verify","uid","login","load_user","Authorization","get","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport {\r\n  SIGNUP_SUCCESS,\r\n  ACTIVATION_SUCCESS,\r\n  ACTIVATION_FAIL,\r\n  RESET_PASSWORD_SUCCESS,\r\n  RESET_PASSWORD_FAIL,\r\n  RESET_PASSWORD_CONFIRM_SUCCESS,\r\n  RESET_PASSWORD_CONFIRM_FAIL,\r\n  LOGOUT,\r\n  LOGIN_SUCCESS,\r\n  USER_LOADED_SUCCESS,\r\n  USER_LOADED_FAIL,\r\n  AUTHENTICATED_SUCCESS,\r\n  AUTHENTICATED_FAIL,\r\n} from \"../constants\";\r\n\r\nimport { returnErrors, clearErrors } from \"./errors\";\r\n\r\n// CHECK AUTHENTICATION\r\nexport const checkAuthenticated = () => async (dispatch) => {\r\n  if (typeof window == \"undefined\") {\r\n    dispatch({\r\n      type: AUTHENTICATED_FAIL,\r\n    });\r\n  }\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({ token: localStorage.getItem(\"access\") });\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/auth/jwt/verify/`,\r\n        body,\r\n        config\r\n      );\r\n\r\n      if (res.data.code !== \"token_not_valid\") {\r\n        dispatch({\r\n          type: AUTHENTICATED_SUCCESS,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: AUTHENTICATED_FAIL,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: AUTHENTICATED_FAIL,\r\n      });\r\n    }\r\n  } else {\r\n    dispatch({\r\n      type: AUTHENTICATED_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// REGISTER A NEW USER\r\nexport const sign_up = ({ name, email, password, re_password }) => async (\r\n  dispatch\r\n) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({ name, email, password, re_password });\r\n  try {\r\n    const res = await axios.post(\r\n      `http://127.0.0.1:8000/auth/users/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: SIGNUP_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch(\r\n      returnErrors({\r\n        msg: error.response.data,\r\n        status: error.response.status,\r\n        id: \"SIGNUP_FAIL\",\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\n// VERIFY WITH AN EMAIL SENT TO USER'S EMAIL\r\nexport const verify = (uid, token) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ uid, token });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `http://127.0.0.1:8000/auth/users/activation/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: ACTIVATION_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ACTIVATION_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// LOGIN A USER\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `http://127.0.0.1:8000/auth/jwt/create/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(load_user());\r\n  } catch (error) {\r\n    dispatch(\r\n      returnErrors({\r\n        msg: error.response.data,\r\n        status: error.response.status,\r\n        id: \"LOGIN_FAIL\",\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\n// LOAD A USER\r\nexport const load_user = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `JWT ${localStorage.getItem(\"access\")}`,\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        `http://127.0.0.1:8000/auth/users/me/`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: USER_LOADED_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_LOADED_FAIL,\r\n      });\r\n    }\r\n  } else {\r\n    dispatch({\r\n      type: USER_LOADED_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// FORGET PASSWORD ----> SENT AN EMAIL TO CONFIRM\r\nexport const reset_password = (email) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `http://127.0.0.1:8000/auth/users/reset_password/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: RESET_PASSWORD_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch(\r\n      returnErrors({\r\n        msg: error.response.data,\r\n        status: error.response.status,\r\n        id: \"RESET_PASSWORD_FAIL\",\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\n// RESET A NEW PASSWORD WITH LIEN SENT IN EMAIL\r\nexport const reset_password_confirm = (\r\n  uid,\r\n  token,\r\n  new_password,\r\n  re_new_password\r\n) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `http://127.0.0.1:8000/auth/users/reset_password_confirm/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: RESET_PASSWORD_CONFIRM_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: RESET_PASSWORD_CONFIRM_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// LOGOUT\r\nexport const logout = () => async (dispatch) => {\r\n  dispatch({ type: LOGOUT });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}